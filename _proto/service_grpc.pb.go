// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServerCelebritySvcClient is the client API for FileServerCelebritySvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerCelebritySvcClient interface {
	UploadCelebrityPosters(ctx context.Context, opts ...grpc.CallOption) (FileServerCelebritySvc_UploadCelebrityPostersClient, error)
	DeleteCelebrityPoster(ctx context.Context, in *DeleteCelebrityPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fileServerCelebritySvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerCelebritySvcClient(cc grpc.ClientConnInterface) FileServerCelebritySvcClient {
	return &fileServerCelebritySvcClient{cc}
}

func (c *fileServerCelebritySvcClient) UploadCelebrityPosters(ctx context.Context, opts ...grpc.CallOption) (FileServerCelebritySvc_UploadCelebrityPostersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerCelebritySvc_ServiceDesc.Streams[0], "/service.FileServerCelebritySvc/UploadCelebrityPosters", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerCelebritySvcUploadCelebrityPostersClient{stream}
	return x, nil
}

type FileServerCelebritySvc_UploadCelebrityPostersClient interface {
	Send(*UploadCelebrityPostersRequest) error
	CloseAndRecv() (*UploadPosterResponse, error)
	grpc.ClientStream
}

type fileServerCelebritySvcUploadCelebrityPostersClient struct {
	grpc.ClientStream
}

func (x *fileServerCelebritySvcUploadCelebrityPostersClient) Send(m *UploadCelebrityPostersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerCelebritySvcUploadCelebrityPostersClient) CloseAndRecv() (*UploadPosterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPosterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerCelebritySvcClient) DeleteCelebrityPoster(ctx context.Context, in *DeleteCelebrityPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.FileServerCelebritySvc/DeleteCelebrityPoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerCelebritySvcServer is the server API for FileServerCelebritySvc service.
// All implementations must embed UnimplementedFileServerCelebritySvcServer
// for forward compatibility
type FileServerCelebritySvcServer interface {
	UploadCelebrityPosters(FileServerCelebritySvc_UploadCelebrityPostersServer) error
	DeleteCelebrityPoster(context.Context, *DeleteCelebrityPosterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFileServerCelebritySvcServer()
}

// UnimplementedFileServerCelebritySvcServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerCelebritySvcServer struct {
}

func (UnimplementedFileServerCelebritySvcServer) UploadCelebrityPosters(FileServerCelebritySvc_UploadCelebrityPostersServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadCelebrityPosters not implemented")
}
func (UnimplementedFileServerCelebritySvcServer) DeleteCelebrityPoster(context.Context, *DeleteCelebrityPosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCelebrityPoster not implemented")
}
func (UnimplementedFileServerCelebritySvcServer) mustEmbedUnimplementedFileServerCelebritySvcServer() {
}

// UnsafeFileServerCelebritySvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerCelebritySvcServer will
// result in compilation errors.
type UnsafeFileServerCelebritySvcServer interface {
	mustEmbedUnimplementedFileServerCelebritySvcServer()
}

func RegisterFileServerCelebritySvcServer(s grpc.ServiceRegistrar, srv FileServerCelebritySvcServer) {
	s.RegisterService(&FileServerCelebritySvc_ServiceDesc, srv)
}

func _FileServerCelebritySvc_UploadCelebrityPosters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerCelebritySvcServer).UploadCelebrityPosters(&fileServerCelebritySvcUploadCelebrityPostersServer{stream})
}

type FileServerCelebritySvc_UploadCelebrityPostersServer interface {
	SendAndClose(*UploadPosterResponse) error
	Recv() (*UploadCelebrityPostersRequest, error)
	grpc.ServerStream
}

type fileServerCelebritySvcUploadCelebrityPostersServer struct {
	grpc.ServerStream
}

func (x *fileServerCelebritySvcUploadCelebrityPostersServer) SendAndClose(m *UploadPosterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerCelebritySvcUploadCelebrityPostersServer) Recv() (*UploadCelebrityPostersRequest, error) {
	m := new(UploadCelebrityPostersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServerCelebritySvc_DeleteCelebrityPoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCelebrityPosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerCelebritySvcServer).DeleteCelebrityPoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FileServerCelebritySvc/DeleteCelebrityPoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerCelebritySvcServer).DeleteCelebrityPoster(ctx, req.(*DeleteCelebrityPosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServerCelebritySvc_ServiceDesc is the grpc.ServiceDesc for FileServerCelebritySvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerCelebritySvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FileServerCelebritySvc",
	HandlerType: (*FileServerCelebritySvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteCelebrityPoster",
			Handler:    _FileServerCelebritySvc_DeleteCelebrityPoster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadCelebrityPosters",
			Handler:       _FileServerCelebritySvc_UploadCelebrityPosters_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// FileServerSeriesSvcClient is the client API for FileServerSeriesSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerSeriesSvcClient interface {
	UploadSeriesPosters(ctx context.Context, opts ...grpc.CallOption) (FileServerSeriesSvc_UploadSeriesPostersClient, error)
	DeleteSeriesPoster(ctx context.Context, in *DeleteSeriesPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fileServerSeriesSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerSeriesSvcClient(cc grpc.ClientConnInterface) FileServerSeriesSvcClient {
	return &fileServerSeriesSvcClient{cc}
}

func (c *fileServerSeriesSvcClient) UploadSeriesPosters(ctx context.Context, opts ...grpc.CallOption) (FileServerSeriesSvc_UploadSeriesPostersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerSeriesSvc_ServiceDesc.Streams[0], "/service.FileServerSeriesSvc/UploadSeriesPosters", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerSeriesSvcUploadSeriesPostersClient{stream}
	return x, nil
}

type FileServerSeriesSvc_UploadSeriesPostersClient interface {
	Send(*UploadSeriesPostersRequest) error
	CloseAndRecv() (*UploadPosterResponse, error)
	grpc.ClientStream
}

type fileServerSeriesSvcUploadSeriesPostersClient struct {
	grpc.ClientStream
}

func (x *fileServerSeriesSvcUploadSeriesPostersClient) Send(m *UploadSeriesPostersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerSeriesSvcUploadSeriesPostersClient) CloseAndRecv() (*UploadPosterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPosterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerSeriesSvcClient) DeleteSeriesPoster(ctx context.Context, in *DeleteSeriesPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.FileServerSeriesSvc/DeleteSeriesPoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerSeriesSvcServer is the server API for FileServerSeriesSvc service.
// All implementations must embed UnimplementedFileServerSeriesSvcServer
// for forward compatibility
type FileServerSeriesSvcServer interface {
	UploadSeriesPosters(FileServerSeriesSvc_UploadSeriesPostersServer) error
	DeleteSeriesPoster(context.Context, *DeleteSeriesPosterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFileServerSeriesSvcServer()
}

// UnimplementedFileServerSeriesSvcServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerSeriesSvcServer struct {
}

func (UnimplementedFileServerSeriesSvcServer) UploadSeriesPosters(FileServerSeriesSvc_UploadSeriesPostersServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadSeriesPosters not implemented")
}
func (UnimplementedFileServerSeriesSvcServer) DeleteSeriesPoster(context.Context, *DeleteSeriesPosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeriesPoster not implemented")
}
func (UnimplementedFileServerSeriesSvcServer) mustEmbedUnimplementedFileServerSeriesSvcServer() {}

// UnsafeFileServerSeriesSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerSeriesSvcServer will
// result in compilation errors.
type UnsafeFileServerSeriesSvcServer interface {
	mustEmbedUnimplementedFileServerSeriesSvcServer()
}

func RegisterFileServerSeriesSvcServer(s grpc.ServiceRegistrar, srv FileServerSeriesSvcServer) {
	s.RegisterService(&FileServerSeriesSvc_ServiceDesc, srv)
}

func _FileServerSeriesSvc_UploadSeriesPosters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerSeriesSvcServer).UploadSeriesPosters(&fileServerSeriesSvcUploadSeriesPostersServer{stream})
}

type FileServerSeriesSvc_UploadSeriesPostersServer interface {
	SendAndClose(*UploadPosterResponse) error
	Recv() (*UploadSeriesPostersRequest, error)
	grpc.ServerStream
}

type fileServerSeriesSvcUploadSeriesPostersServer struct {
	grpc.ServerStream
}

func (x *fileServerSeriesSvcUploadSeriesPostersServer) SendAndClose(m *UploadPosterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerSeriesSvcUploadSeriesPostersServer) Recv() (*UploadSeriesPostersRequest, error) {
	m := new(UploadSeriesPostersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServerSeriesSvc_DeleteSeriesPoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeriesPosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerSeriesSvcServer).DeleteSeriesPoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FileServerSeriesSvc/DeleteSeriesPoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerSeriesSvcServer).DeleteSeriesPoster(ctx, req.(*DeleteSeriesPosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServerSeriesSvc_ServiceDesc is the grpc.ServiceDesc for FileServerSeriesSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerSeriesSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FileServerSeriesSvc",
	HandlerType: (*FileServerSeriesSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteSeriesPoster",
			Handler:    _FileServerSeriesSvc_DeleteSeriesPoster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadSeriesPosters",
			Handler:       _FileServerSeriesSvc_UploadSeriesPosters_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// FileServerArticleSvcClient is the client API for FileServerArticleSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerArticleSvcClient interface {
	UploadArticlePosters(ctx context.Context, opts ...grpc.CallOption) (FileServerArticleSvc_UploadArticlePostersClient, error)
	DeleteArticlePoster(ctx context.Context, in *DeleteArticlePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fileServerArticleSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerArticleSvcClient(cc grpc.ClientConnInterface) FileServerArticleSvcClient {
	return &fileServerArticleSvcClient{cc}
}

func (c *fileServerArticleSvcClient) UploadArticlePosters(ctx context.Context, opts ...grpc.CallOption) (FileServerArticleSvc_UploadArticlePostersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerArticleSvc_ServiceDesc.Streams[0], "/service.FileServerArticleSvc/UploadArticlePosters", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerArticleSvcUploadArticlePostersClient{stream}
	return x, nil
}

type FileServerArticleSvc_UploadArticlePostersClient interface {
	Send(*UploadArticlePostersRequest) error
	CloseAndRecv() (*UploadPosterResponse, error)
	grpc.ClientStream
}

type fileServerArticleSvcUploadArticlePostersClient struct {
	grpc.ClientStream
}

func (x *fileServerArticleSvcUploadArticlePostersClient) Send(m *UploadArticlePostersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerArticleSvcUploadArticlePostersClient) CloseAndRecv() (*UploadPosterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPosterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerArticleSvcClient) DeleteArticlePoster(ctx context.Context, in *DeleteArticlePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.FileServerArticleSvc/DeleteArticlePoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerArticleSvcServer is the server API for FileServerArticleSvc service.
// All implementations must embed UnimplementedFileServerArticleSvcServer
// for forward compatibility
type FileServerArticleSvcServer interface {
	UploadArticlePosters(FileServerArticleSvc_UploadArticlePostersServer) error
	DeleteArticlePoster(context.Context, *DeleteArticlePosterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFileServerArticleSvcServer()
}

// UnimplementedFileServerArticleSvcServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerArticleSvcServer struct {
}

func (UnimplementedFileServerArticleSvcServer) UploadArticlePosters(FileServerArticleSvc_UploadArticlePostersServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadArticlePosters not implemented")
}
func (UnimplementedFileServerArticleSvcServer) DeleteArticlePoster(context.Context, *DeleteArticlePosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticlePoster not implemented")
}
func (UnimplementedFileServerArticleSvcServer) mustEmbedUnimplementedFileServerArticleSvcServer() {}

// UnsafeFileServerArticleSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerArticleSvcServer will
// result in compilation errors.
type UnsafeFileServerArticleSvcServer interface {
	mustEmbedUnimplementedFileServerArticleSvcServer()
}

func RegisterFileServerArticleSvcServer(s grpc.ServiceRegistrar, srv FileServerArticleSvcServer) {
	s.RegisterService(&FileServerArticleSvc_ServiceDesc, srv)
}

func _FileServerArticleSvc_UploadArticlePosters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerArticleSvcServer).UploadArticlePosters(&fileServerArticleSvcUploadArticlePostersServer{stream})
}

type FileServerArticleSvc_UploadArticlePostersServer interface {
	SendAndClose(*UploadPosterResponse) error
	Recv() (*UploadArticlePostersRequest, error)
	grpc.ServerStream
}

type fileServerArticleSvcUploadArticlePostersServer struct {
	grpc.ServerStream
}

func (x *fileServerArticleSvcUploadArticlePostersServer) SendAndClose(m *UploadPosterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerArticleSvcUploadArticlePostersServer) Recv() (*UploadArticlePostersRequest, error) {
	m := new(UploadArticlePostersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServerArticleSvc_DeleteArticlePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticlePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerArticleSvcServer).DeleteArticlePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FileServerArticleSvc/DeleteArticlePoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerArticleSvcServer).DeleteArticlePoster(ctx, req.(*DeleteArticlePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServerArticleSvc_ServiceDesc is the grpc.ServiceDesc for FileServerArticleSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerArticleSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FileServerArticleSvc",
	HandlerType: (*FileServerArticleSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteArticlePoster",
			Handler:    _FileServerArticleSvc_DeleteArticlePoster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadArticlePosters",
			Handler:       _FileServerArticleSvc_UploadArticlePosters_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// FileServerMovieSvcClient is the client API for FileServerMovieSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerMovieSvcClient interface {
	UploadMoviePosters(ctx context.Context, opts ...grpc.CallOption) (FileServerMovieSvc_UploadMoviePostersClient, error)
	DeleteMoviePoster(ctx context.Context, in *DeleteMoviePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fileServerMovieSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerMovieSvcClient(cc grpc.ClientConnInterface) FileServerMovieSvcClient {
	return &fileServerMovieSvcClient{cc}
}

func (c *fileServerMovieSvcClient) UploadMoviePosters(ctx context.Context, opts ...grpc.CallOption) (FileServerMovieSvc_UploadMoviePostersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerMovieSvc_ServiceDesc.Streams[0], "/service.FileServerMovieSvc/UploadMoviePosters", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerMovieSvcUploadMoviePostersClient{stream}
	return x, nil
}

type FileServerMovieSvc_UploadMoviePostersClient interface {
	Send(*UploadMoviePostersRequest) error
	CloseAndRecv() (*UploadPosterResponse, error)
	grpc.ClientStream
}

type fileServerMovieSvcUploadMoviePostersClient struct {
	grpc.ClientStream
}

func (x *fileServerMovieSvcUploadMoviePostersClient) Send(m *UploadMoviePostersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerMovieSvcUploadMoviePostersClient) CloseAndRecv() (*UploadPosterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPosterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerMovieSvcClient) DeleteMoviePoster(ctx context.Context, in *DeleteMoviePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.FileServerMovieSvc/DeleteMoviePoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerMovieSvcServer is the server API for FileServerMovieSvc service.
// All implementations must embed UnimplementedFileServerMovieSvcServer
// for forward compatibility
type FileServerMovieSvcServer interface {
	UploadMoviePosters(FileServerMovieSvc_UploadMoviePostersServer) error
	DeleteMoviePoster(context.Context, *DeleteMoviePosterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFileServerMovieSvcServer()
}

// UnimplementedFileServerMovieSvcServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerMovieSvcServer struct {
}

func (UnimplementedFileServerMovieSvcServer) UploadMoviePosters(FileServerMovieSvc_UploadMoviePostersServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadMoviePosters not implemented")
}
func (UnimplementedFileServerMovieSvcServer) DeleteMoviePoster(context.Context, *DeleteMoviePosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMoviePoster not implemented")
}
func (UnimplementedFileServerMovieSvcServer) mustEmbedUnimplementedFileServerMovieSvcServer() {}

// UnsafeFileServerMovieSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerMovieSvcServer will
// result in compilation errors.
type UnsafeFileServerMovieSvcServer interface {
	mustEmbedUnimplementedFileServerMovieSvcServer()
}

func RegisterFileServerMovieSvcServer(s grpc.ServiceRegistrar, srv FileServerMovieSvcServer) {
	s.RegisterService(&FileServerMovieSvc_ServiceDesc, srv)
}

func _FileServerMovieSvc_UploadMoviePosters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerMovieSvcServer).UploadMoviePosters(&fileServerMovieSvcUploadMoviePostersServer{stream})
}

type FileServerMovieSvc_UploadMoviePostersServer interface {
	SendAndClose(*UploadPosterResponse) error
	Recv() (*UploadMoviePostersRequest, error)
	grpc.ServerStream
}

type fileServerMovieSvcUploadMoviePostersServer struct {
	grpc.ServerStream
}

func (x *fileServerMovieSvcUploadMoviePostersServer) SendAndClose(m *UploadPosterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerMovieSvcUploadMoviePostersServer) Recv() (*UploadMoviePostersRequest, error) {
	m := new(UploadMoviePostersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServerMovieSvc_DeleteMoviePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMoviePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerMovieSvcServer).DeleteMoviePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FileServerMovieSvc/DeleteMoviePoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerMovieSvcServer).DeleteMoviePoster(ctx, req.(*DeleteMoviePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServerMovieSvc_ServiceDesc is the grpc.ServiceDesc for FileServerMovieSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerMovieSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FileServerMovieSvc",
	HandlerType: (*FileServerMovieSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteMoviePoster",
			Handler:    _FileServerMovieSvc_DeleteMoviePoster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadMoviePosters",
			Handler:       _FileServerMovieSvc_UploadMoviePosters_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// FileServerSeasonSvcClient is the client API for FileServerSeasonSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerSeasonSvcClient interface {
	UploadSeasonPosters(ctx context.Context, opts ...grpc.CallOption) (FileServerSeasonSvc_UploadSeasonPostersClient, error)
	DeleteSeasonPoster(ctx context.Context, in *DeleteSeasonPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fileServerSeasonSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerSeasonSvcClient(cc grpc.ClientConnInterface) FileServerSeasonSvcClient {
	return &fileServerSeasonSvcClient{cc}
}

func (c *fileServerSeasonSvcClient) UploadSeasonPosters(ctx context.Context, opts ...grpc.CallOption) (FileServerSeasonSvc_UploadSeasonPostersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerSeasonSvc_ServiceDesc.Streams[0], "/service.FileServerSeasonSvc/UploadSeasonPosters", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerSeasonSvcUploadSeasonPostersClient{stream}
	return x, nil
}

type FileServerSeasonSvc_UploadSeasonPostersClient interface {
	Send(*UploadSeasonPostersRequest) error
	CloseAndRecv() (*UploadPosterResponse, error)
	grpc.ClientStream
}

type fileServerSeasonSvcUploadSeasonPostersClient struct {
	grpc.ClientStream
}

func (x *fileServerSeasonSvcUploadSeasonPostersClient) Send(m *UploadSeasonPostersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerSeasonSvcUploadSeasonPostersClient) CloseAndRecv() (*UploadPosterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPosterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerSeasonSvcClient) DeleteSeasonPoster(ctx context.Context, in *DeleteSeasonPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.FileServerSeasonSvc/DeleteSeasonPoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerSeasonSvcServer is the server API for FileServerSeasonSvc service.
// All implementations must embed UnimplementedFileServerSeasonSvcServer
// for forward compatibility
type FileServerSeasonSvcServer interface {
	UploadSeasonPosters(FileServerSeasonSvc_UploadSeasonPostersServer) error
	DeleteSeasonPoster(context.Context, *DeleteSeasonPosterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFileServerSeasonSvcServer()
}

// UnimplementedFileServerSeasonSvcServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerSeasonSvcServer struct {
}

func (UnimplementedFileServerSeasonSvcServer) UploadSeasonPosters(FileServerSeasonSvc_UploadSeasonPostersServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadSeasonPosters not implemented")
}
func (UnimplementedFileServerSeasonSvcServer) DeleteSeasonPoster(context.Context, *DeleteSeasonPosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeasonPoster not implemented")
}
func (UnimplementedFileServerSeasonSvcServer) mustEmbedUnimplementedFileServerSeasonSvcServer() {}

// UnsafeFileServerSeasonSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerSeasonSvcServer will
// result in compilation errors.
type UnsafeFileServerSeasonSvcServer interface {
	mustEmbedUnimplementedFileServerSeasonSvcServer()
}

func RegisterFileServerSeasonSvcServer(s grpc.ServiceRegistrar, srv FileServerSeasonSvcServer) {
	s.RegisterService(&FileServerSeasonSvc_ServiceDesc, srv)
}

func _FileServerSeasonSvc_UploadSeasonPosters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerSeasonSvcServer).UploadSeasonPosters(&fileServerSeasonSvcUploadSeasonPostersServer{stream})
}

type FileServerSeasonSvc_UploadSeasonPostersServer interface {
	SendAndClose(*UploadPosterResponse) error
	Recv() (*UploadSeasonPostersRequest, error)
	grpc.ServerStream
}

type fileServerSeasonSvcUploadSeasonPostersServer struct {
	grpc.ServerStream
}

func (x *fileServerSeasonSvcUploadSeasonPostersServer) SendAndClose(m *UploadPosterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerSeasonSvcUploadSeasonPostersServer) Recv() (*UploadSeasonPostersRequest, error) {
	m := new(UploadSeasonPostersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServerSeasonSvc_DeleteSeasonPoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeasonPosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerSeasonSvcServer).DeleteSeasonPoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FileServerSeasonSvc/DeleteSeasonPoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerSeasonSvcServer).DeleteSeasonPoster(ctx, req.(*DeleteSeasonPosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServerSeasonSvc_ServiceDesc is the grpc.ServiceDesc for FileServerSeasonSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerSeasonSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FileServerSeasonSvc",
	HandlerType: (*FileServerSeasonSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteSeasonPoster",
			Handler:    _FileServerSeasonSvc_DeleteSeasonPoster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadSeasonPosters",
			Handler:       _FileServerSeasonSvc_UploadSeasonPosters_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// FileServerEpisodeSvcClient is the client API for FileServerEpisodeSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerEpisodeSvcClient interface {
	UploadEpisodePosters(ctx context.Context, opts ...grpc.CallOption) (FileServerEpisodeSvc_UploadEpisodePostersClient, error)
	DeleteEpisodePoster(ctx context.Context, in *DeleteEpisodePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fileServerEpisodeSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerEpisodeSvcClient(cc grpc.ClientConnInterface) FileServerEpisodeSvcClient {
	return &fileServerEpisodeSvcClient{cc}
}

func (c *fileServerEpisodeSvcClient) UploadEpisodePosters(ctx context.Context, opts ...grpc.CallOption) (FileServerEpisodeSvc_UploadEpisodePostersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerEpisodeSvc_ServiceDesc.Streams[0], "/service.FileServerEpisodeSvc/UploadEpisodePosters", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerEpisodeSvcUploadEpisodePostersClient{stream}
	return x, nil
}

type FileServerEpisodeSvc_UploadEpisodePostersClient interface {
	Send(*UploadEpisodePostersRequest) error
	CloseAndRecv() (*UploadPosterResponse, error)
	grpc.ClientStream
}

type fileServerEpisodeSvcUploadEpisodePostersClient struct {
	grpc.ClientStream
}

func (x *fileServerEpisodeSvcUploadEpisodePostersClient) Send(m *UploadEpisodePostersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerEpisodeSvcUploadEpisodePostersClient) CloseAndRecv() (*UploadPosterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPosterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerEpisodeSvcClient) DeleteEpisodePoster(ctx context.Context, in *DeleteEpisodePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.FileServerEpisodeSvc/DeleteEpisodePoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerEpisodeSvcServer is the server API for FileServerEpisodeSvc service.
// All implementations must embed UnimplementedFileServerEpisodeSvcServer
// for forward compatibility
type FileServerEpisodeSvcServer interface {
	UploadEpisodePosters(FileServerEpisodeSvc_UploadEpisodePostersServer) error
	DeleteEpisodePoster(context.Context, *DeleteEpisodePosterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFileServerEpisodeSvcServer()
}

// UnimplementedFileServerEpisodeSvcServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerEpisodeSvcServer struct {
}

func (UnimplementedFileServerEpisodeSvcServer) UploadEpisodePosters(FileServerEpisodeSvc_UploadEpisodePostersServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadEpisodePosters not implemented")
}
func (UnimplementedFileServerEpisodeSvcServer) DeleteEpisodePoster(context.Context, *DeleteEpisodePosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEpisodePoster not implemented")
}
func (UnimplementedFileServerEpisodeSvcServer) mustEmbedUnimplementedFileServerEpisodeSvcServer() {}

// UnsafeFileServerEpisodeSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerEpisodeSvcServer will
// result in compilation errors.
type UnsafeFileServerEpisodeSvcServer interface {
	mustEmbedUnimplementedFileServerEpisodeSvcServer()
}

func RegisterFileServerEpisodeSvcServer(s grpc.ServiceRegistrar, srv FileServerEpisodeSvcServer) {
	s.RegisterService(&FileServerEpisodeSvc_ServiceDesc, srv)
}

func _FileServerEpisodeSvc_UploadEpisodePosters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerEpisodeSvcServer).UploadEpisodePosters(&fileServerEpisodeSvcUploadEpisodePostersServer{stream})
}

type FileServerEpisodeSvc_UploadEpisodePostersServer interface {
	SendAndClose(*UploadPosterResponse) error
	Recv() (*UploadEpisodePostersRequest, error)
	grpc.ServerStream
}

type fileServerEpisodeSvcUploadEpisodePostersServer struct {
	grpc.ServerStream
}

func (x *fileServerEpisodeSvcUploadEpisodePostersServer) SendAndClose(m *UploadPosterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerEpisodeSvcUploadEpisodePostersServer) Recv() (*UploadEpisodePostersRequest, error) {
	m := new(UploadEpisodePostersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServerEpisodeSvc_DeleteEpisodePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEpisodePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerEpisodeSvcServer).DeleteEpisodePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FileServerEpisodeSvc/DeleteEpisodePoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerEpisodeSvcServer).DeleteEpisodePoster(ctx, req.(*DeleteEpisodePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServerEpisodeSvc_ServiceDesc is the grpc.ServiceDesc for FileServerEpisodeSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerEpisodeSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FileServerEpisodeSvc",
	HandlerType: (*FileServerEpisodeSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteEpisodePoster",
			Handler:    _FileServerEpisodeSvc_DeleteEpisodePoster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadEpisodePosters",
			Handler:       _FileServerEpisodeSvc_UploadEpisodePosters_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
